groups:
  - id: event.feature_flag.evaluation
    type: event
    name: feature_flag.evaluation
    brief: >
      Defines feature flag evaluation as an event.
    note: >
      A `feature_flag.evaluation` event SHOULD be emitted whenever a feature flag
      value is evaluated, which may happen many times over the course of an
      application lifecycle.
      For example, a website A/B testing different animations may evaluate a
      flag each time a button is clicked.
      A `feature_flag.evaluation` event is emitted on each evaluation even if the result is the same.
    attributes:
      # ToDo: add feature_flag.result.value when any type available - tooling currenly does not support it
      - id: feature_flag.key
        type: string
        stability: experimental
        brief: The unique identifier of the feature flag.
        examples: ["logo-color"]
      - id: feature_flag.provider.name
        type: string
        stability: experimental
        brief: The name of the service provider that performs the flag evaluation.
        examples: ["Flag Manager"]
      - id: feature_flag.result.variant
        type: string
        stability: experimental
        examples: ["red", "true", "on"]
        brief: >
          A semantic identifier for an evaluated flag value.
        note: |-
          A semantic identifier, commonly referred to as a variant, provides a means
          for referring to a value without including the value itself. This can
          provide additional context for understanding the meaning behind a value.
          For example, the variant `red` maybe be used for the value `#c05543`.
      - id: feature_flag.context.id
        type: string
        stability: experimental
        examples: ["5157782b-2203-4c80-a857-dbbd5e7761db"]
        brief: >
          The unique identifier for the flag evaluation context. For example, the targeting key.
      - id: feature_flag.version
        type: string
        stability: experimental
        examples: ["1", "01ABCDEF"]
        brief: >
          The version of the ruleset used during the evaluation. This can be any stable value that uniquely identifies the ruleset.
      - id: feature_flag.set.id
        type: string
        stability: experimental
        examples: ["proj-1", "ab98sgs", "service1/dev"]
        brief: >
          The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to that the feature flag belongs.
      - id: feature_flag.result.reason
        stability: experimental
        type:
          members:
            - id: static
              value: "static"
              brief: The resolved value is static (no dynamic evaluation).
            - id: default
              value: "default"
              brief: The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).
            - id: targeting_match
              value: "targeting_match"
              brief: The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.
            - id: split
              value: "split"
              brief: The resolved value was the result of pseudorandom assignment.
            - id: cached
              value: "cached"
              brief: The resolved value was retrieved from cache.
            - id: disabled
              value: "disabled"
              brief: The resolved value was the result of the flag being disabled in the management system.
            - id: unknown
              value: "unknown"
              brief: The reason for the resolved value could not be determined.
            - id: stale
              value: "stale"
              brief: The resolved value is non-authoritative or possibly out of date.
            - id: error
              value: "error"
              brief: The resolved value was the result of an error.
        examples: ["static", "targeting_match", "error", "default"]
        brief: >
          The reason code, which shows how a feature flag value was determined.
