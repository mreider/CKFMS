groups:
  - id: messaging
    type: span
    brief: 'Semantic convention describing messaging spans.'
    attributes:
      - id: messaging.system
        type:
          allow_custom_values: true
          members:
            - id: activemq
              value: 'activemq'
              brief: 'ActiveMQ'
            - id: artemis
              value: 'artemis'
              brief: 'ActiveMQ Artemis'
            - id: aws_sns
              value: 'aws_sns'
              brief: 'Amazon Simple Notification Service (SNS)'
            - id: aws_sqs
              value: 'aws_sqs'
              brief: 'Amazon Simple Queue Service (SQS)'
            - id: aws_eventbridge
              value: 'aws_eventbridge'
              brief: 'Amazon EventBridge'
            - id: azure_eventgrid
              value: 'azure_eventgrid'
              brief: 'Azure Event Grid'
            - id: azure_eventhubs
              value: 'azure_eventhubs'
              brief: 'Azure Event Hubs'
            - id: azure_servicebus
              value: 'azure_servicebus'
              brief: 'Azure Service Bus'
            - id: gcp_pubsub
              value: 'gcp_pubsub'
              brief: 'Google Cloud Pub/Sub'
            - id: jms
              value: 'jms'
              brief: 'Java Message Service'
            - id: hornetq
              value: 'hornetq'
              brief: 'HornetQ'
            - id: kafka
              value: 'kafka'
              brief: 'Apache Kafka'
            - id: msmq
              value: 'msmq'
              brief: 'MSMQ'
            - id: mqseries
              value: 'mqseries'
              brief: 'IBM MQ'
            - id: rabbitmq
              value: 'rabbitmq'
              brief: 'RabbitMQ'
            - id: rocketmq
              value: 'rocketmq'
              brief: 'Apache RocketMQ'
            - id: sag_webmethods_is
              value: 'sag_webmethods_is'
              brief: 'Software AG, webMethods Integration Server'
            - id: tibco_ems
              value: 'tibco_ems'
              brief: 'Tibco EMS'
            - id: websphere
              value: 'websphere'
              brief: 'IBM WebSphere Application Server'
            - id: weblogic
              value: 'weblogic'
              brief: 'Oracle WebLogic'
        stability: experimental # traces-in-grail
        brief: An identifier for the messaging system. See below for a list of well-known identifiers.
        examples: ['kafka', 'rabbitmq']

      - id: messaging.operation.type
        type:
          allow_custom_values: true
          members:
            - id: publish
              value: "publish"
              brief: A message is sent to a destination by a message producer (`span.kind` is "producer").
            - id: peek
              value: "peek"
              brief: A message is received from a destination by a message consumer/server, but left there (`span.kind` is "consumer").
            - id: receive
              value: "receive"
              brief: A message is received from a destination by a message consumer (`span.kind` is "consumer").
            - id: process
              value: "process"
              brief: A message previously received from a destination is processed by a message consumer (`span.kind` is "consumer").
        stability: experimental # traces-in-grail
        brief: A string identifying the kind of messaging operation.

      - id: messaging.operation
        type:
          allow_custom_values: true
          members:
            - id: publish
              value: "publish"
              brief: A message is sent to a destination by a message producer (`span.kind` is "producer").
            - id: peek
              value: "peek"
              brief: A message is received from a destination by a message consumer/server, but left there (`span.kind` is "consumer").
            - id: receive
              value: "receive"
              brief: A message is received from a destination by a message consumer (`span.kind` is "consumer").
            - id: process
              value: "process"
              brief: A message previously received from a destination is processed by a message consumer (`span.kind` is "consumer").
        deprecated: Replaced by messaging.operation.type # otel-stabilization
        internal: true
        brief: A string identifying the kind of messaging operation.

      - id: messaging.batch.message_count
        type: long
        stability: experimental # traces-in-grail
        brief: The number of messages sent, received, or processed in the scope of the batching operation.
        examples: [1, 2, 3]

      - id: messaging.message.header.__key__
        type: record # ToDo: should be any/object/... as type depends - but tooling doesn't support this as of now
        stability: experimental # traces-in-grail
        brief: >
          The message headers, `__key__` being the message header/attribute name, for example, "messaging.message.header.ExtendedPayloadSize".
          The data type of the value depends on the attribute.
        examples: 1024, "my-eu-bucket-3", ["a", "b"]

      - id: messaging.message.id
        type: string
        stability: experimental # traces-in-grail
        brief: 'A value used by the messaging system as an identifier for the message, represented as a string.'
        examples: '452a7c7c7c7048c2f887f61572b18fc2'

      - id: messaging.message.conversation_id
        type: string
        stability: experimental # traces-in-grail
        brief: The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".
        examples: 'MyConversationId'

      - id: messaging.message.body.size
        type: long
        stability: experimental # traces-in-grail
        brief: The (uncompressed) size of the message payload in bytes.
        examples: 2738

      - id: messaging.message.payload_size_bytes
        type: long
        deprecated: Replaced by messaging.message.body.size # otel-stabilization
        internal: true
        brief: The (uncompressed) size of the message payload in bytes.
        examples: 2738

      - id: messaging.client.id
        type: string
        stability: experimental # traces-in-grail
        brief: A unique identifier for the client that consumes or produces a message.
        examples: ['aclient', 'myhost@68d46b89c9-c29qc']

      - id: messaging.consumer.group.name
        type: string
        stability: experimental # traces-in-grail
        brief: The name of the consumer group with which a consumer is associated.
        examples: ['my-group', 'indexer']

      - id: messaging.destination.name
        type: string
        stability: experimental # traces-in-grail
        brief: 'The message destination name'
        note: 'Destination name uniquely identifies a specific queue, topic or other entity within the broker.'
        examples: ['MyQueue', 'MyTopic']

      - id: messaging.destination.manager_name
        type: string
        stability: experimental # traces-in-grail
        brief: "The destination's manager name"
        note: 'Manager name uniquely identifies the broker.'
        examples: ['MyBroker']

      - id: messaging.destination.partition.id
        type: string
        stability: experimental # traces-in-grail
        brief: String representation of the partition ID the message is sent to or received from.
        examples: ['1']

      - id: messaging.destination.kind
        type:
          allow_custom_values: false
          members:
            - id: queue
              value: "queue"
              brief: "A message sent to or received from a queue"
            - id: topic
              value: "topic"
              brief: "A message sent to or received from a topic"
        stability: deprecated
        brief: 'The kind of message destination'
        examples: ['queue', 'topic']

      - id: messaging.destination.temporary
        type: boolean
        stability: experimental # traces-in-grail
        brief: 'A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.'

      - id: messaging.source.name
        deprecated: Replaced by `messaging.destination.name`.
        type: string
        brief: 'The message source name'
        note: 'Source name uniquely identifies a specific queue, topic, or other entity within the broker.'
        examples: ['MyQueue', 'MyTopic']

      - id: messaging.source.manager_name
        deprecated: Replaced by `messaging.destination.manager_name`.
        type: string
        brief: "The source's manager name"
        note: 'Manager name uniquely identifies the broker.'
        examples: ['MyBroker']

      - id: messaging.source.kind
        stability: deprecated
        type:
          allow_custom_values: false
          members:
            - id: queue
              value: "queue"
              brief: "A message received from a queue"
            - id: topic
              value: "topic"
              brief: "A message received from a topic"
        brief: 'The kind of message source'
        examples: ['queue', 'topic']

      - id: messaging.source.temporary
        deprecated: Replaced by `messaging.destination.temporary`.
        type: boolean
        brief: 'A boolean that is true if the message source is temporary and might not exist anymore after messages are processed.'

  - id: messaging.akka
    type: span
    extends: messaging
    brief: Tech-specific attributes for Akka.
    attributes:
      - id: messaging.akka.actor.system
        type: string
        stability: experimental # traces-in-grail
        brief: Name of the actor system.
        examples: [ 'RequesterSystem', 'ResponseSystem' ]

      - id: messaging.akka.actor.path
        type: string
        stability: experimental # traces-in-grail
        brief: Path to actor inside actor system.
        examples: [ '/system/log1-Logging$DefaultLogger', '/remote/akka.tcp/RequesterSystem@localhost:52133/user/requestActor/$a' ]

      - id: messaging.akka.actor.kind
        type: string
        stability: experimental # traces-in-grail
        brief: Name of the top-level actor. See [The Akka actor hierarchy](https://doc.akka.io/docs/akka/2.5/guide/tutorial_1.html#the-akka-actor-hierarchy)
        examples: [ 'system', 'user' ]

      - id: messaging.akka.actor.type
        type: string
        stability: experimental # traces-in-grail
        brief: Fully qualified type name of actor.
        examples: [ 'com.acme.RespondingActor' ]

      - id: messaging.akka.message.type
        type: string
        stability: experimental # traces-in-grail
        brief: Fully qualified type name of the message.
        examples: [ 'java.lang.String', 'akka.event.Logging$Info2', 'com.acme.twosuds.ResponseActor$RequestMessage' ]

  - id: messaging.kafka
    type: span
    extends: messaging
    brief: Tech-specific attributes for Kafka.
    attributes:
      - id: messaging.kafka.message.key
        type: string
        stability: experimental # traces-in-grail
        brief: The `key` property of the message.
        examples: ['mykey']

      - id: messaging.kafka.offset
        type: long
        stability: experimental # traces-in-grail
        brief: The offset of the message.
        examples: [42]

      - id: messaging.kafka.message.tombstone
        type: boolean
        stability: experimental # traces-in-grail
        brief: A boolean that is true if the message is a tombstone.
        examples: [true]
        note: If the message is a tombstone, the value is `true`. When missing, the value is assumed to be `false`.
