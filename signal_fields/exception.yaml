groups:
  - id: exception
    type: span
    brief:
    attributes:
      - id: exception.type
        type: string
        stability: stable # traces-in-grail
        brief: >
          The type of the exception, for example its fully-qualified class name.
        examples: [ 'java.net.ConnectException', 'OSError' ]

      - id: exception.message
        type: string
        stability: stable # traces-in-grail
        brief: >
          A message that describes the exception.
        examples: [ 'Division by zero' ]

      - id: exception.file_name
        type: string
        internal: true
        stability: deprecated
        brief: >
          Deprecated, do not use it! Use `exception.file.full` or `code.filepath` instead. The name of the file where the exception happened.
        examples: [ 'https://www.foo.bar/path/main.js', 'main.js' ]

      - id: exception.file.full
        type: string
        stability: experimental
        brief: >
          The full file location when the exception happened. This is either an absolute URL or a filename.
        examples: [ 'https://www.foo.bar/path/main.js', 'main.js' ]

      - id: exception.file.domain
        type: string
        stability: experimental
        brief: >
          The URI domain component. This is extracted from `exception.file.full`.
        examples: [ 'www.foo.bar' ]

      - id: exception.file.path
        type: string
        stability: experimental
        brief: >
          The URI path component. This is extracted from `exception.file.full`.
        examples: [ '/path/main.js' ]

      - id: exception.file.provider
        type:
          allow_custom_values: false
          members:
            - id: first_party
              value: 'first_party'
              brief: First-party provider.
            - id: third_party
              value: 'third_party'
              brief: Third-party provider.
            - id: cdn
              value: 'cdn'
              brief: CDN (content delivery network).
        internal: true
        stability: experimental
        brief: >
          The provider type for the host name of `exception.file.full`. This information is determined by Dynatrace RUM resource detection.
        examples: ['third_party']

      - id: exception.line_number
        type: long
        stability: experimental
        brief: >
          The line number where the exception happened.
        examples: [ 1401 ]

      - id: exception.column_number
        type: long
        stability: experimental
        brief: >
          The column number where the exception happened.
        examples: [ 12304 ]

      - id: exception.stack_trace
        type: string
        stability: experimental # traces-in-grail
        brief: >
          The stack trace of the exception. The format depends on the technology and source. While OneAgent formats stack traces to unify them across technologies, stack traces from an OpenTelemetry source are in the format they were sent to Dynatrace.
        examples: [ '@https://www.foo.bar/path/main.js:59:26 e@https://www.foo.bar/path/lib/1.1/lib.js:2:30315']

      - id: exception.escaped
        type: boolean
        stability: stable # traces-in-grail
        brief: >
          `true` indicates that the exception was recorded at a point where it is known that the exception escaped the scope of the span.

      - id: exception.id
        type: uid
        stability: stable # traces-in-grail
        brief: >
          The identifier of an exception. It should be unique within a list of exceptions. The identifier is used to reference the exception.

      - id: exception.caused_by_id
        type: uid
        stability: stable # traces-in-grail
        brief: >
          The `exception.id` of the exception the current exception was caused by.

      - id: exception.is_caused_by_root
        type: boolean
        stability: stable # traces-in-grail
        brief: >
          Is set to `true` if the exception is the first exception caused by the chain.

      - id: exception.is_stack_trace_generated
        type: boolean
        internal: true
        stability: experimental
        brief: >
          If set to `true`, the captured stack trace was generated by Dynatrace RUM. This is only available if the user event contains a stack trace. Only supported by RUM JavaScript and OneAgent for Mobile with the Dynatrace Flutter extension.
        examples: [ false ]

      - id: exception.is_stack_trace_wrapped
        type: boolean
        internal: true
        stability: experimental
        brief: >
          If set to `true`, Dynatrace RUM wrapped the method that caused the exception. This is only available if the user event contains a stack trace. Only supported by RUM JavaScript and OneAgent for Mobile with the Dynatrace Flutter extension.
        examples: [ false ]

      - id: exception.crash_signal_name
        type: string
        internal: true
        stability: experimental
        brief: >
          The signal that was sent to the process.
        examples: [ 'SIGSEGV' ]
